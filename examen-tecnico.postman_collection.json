{
	"info": {
		"_postman_id": "fb5f3601-b3b0-4dd7-9cbb-79fc1ca0def1",
		"name": "examen-tecnico",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26562466",
		"_collection_link": "https://planetary-sunset-948603.postman.co/workspace/Team-Workspace~5f581d7e-a111-4e2f-8fcd-5f4e719316f6/collection/26562466-fb5f3601-b3b0-4dd7-9cbb-79fc1ca0def1?action=share&source=collection_link&creator=26562466"
	},
	"item": [
		{
			"name": "crear producto",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "nombre",
							"value": "Producto 1",
							"type": "text"
						},
						{
							"key": "descripcion",
							"value": "Descripción del Producto 1 muy larga",
							"type": "text"
						},
						{
							"key": "precio",
							"value": "10",
							"type": "text"
						},
						{
							"key": "cantidad",
							"value": "10",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:3000/api/productos",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"productos"
					]
				},
				"description": "## Add Product\n\nThis endpoint allows you to add a new product to the inventory. It accepts product details through an HTTP POST request.\n\n### Request\n\n- **Method**: POST\n    \n- **URL**: `http://localhost:3000/api/productos`\n    \n- **Content-Type**: `application/x-www-form-urlencoded`\n    \n\n#### Request Body Parameters\n\nThe request body must be formatted as `x-www-form-urlencoded` and should include the following parameters:\n\n| Parameter | Type | Description |\n| --- | --- | --- |\n| `nombre` | text | The name of the product. |\n| `descripcion` | text | A brief description of the product. |\n| `precio` | text | The price of the product. |\n| `cantidad` | text | The quantity of the product available. |\n\n### Response\n\nThe response will return a JSON object indicating the status of the request.\n\n- **Status Code**: 400\n    \n- **Content-Type**: `application/json`\n    \n\n#### Response Structure\n\n``` json\n{\n  \"status\": 0,\n  \"message\": \"\"\n}\n\n ```\n\n- `status`: Indicates the success or failure of the request. A value of `0` typically signifies an error.\n    \n- `message`: A message providing additional information about the status, which may be empty in case of errors.\n    \n\n### Notes\n\nEnsure that all required fields are provided in the request body to avoid errors. A status code of `400` indicates a bad request, which typically means that the input data was not valid or was incomplete."
			},
			"response": []
		},
		{
			"name": "borrar producto",
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "nombre",
							"value": "Producto 1",
							"type": "text"
						},
						{
							"key": "descripcion",
							"value": "Descripción del Producto 1",
							"type": "text"
						},
						{
							"key": "precio",
							"value": "",
							"type": "text"
						},
						{
							"key": "cantidad",
							"value": "",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:3000/api/productos/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"productos",
						"1"
					]
				},
				"description": "## DELETE /api/productos/{id}\n\nThis endpoint is used to delete a product from the system based on the provided product ID. The ID is specified in the URL path, and in this case, it is `1`.\n\n### Request Parameters\n\nThe request requires the following parameters in the body, formatted as `x-www-form-urlencoded`:\n\n- **nombre** (text): The name of the product to be deleted.\n    \n- **descripcion** (text): A description of the product to be deleted.\n    \n- **precio** (text): The price of the product to be deleted.\n    \n- **cantidad** (text): The quantity of the product to be deleted.\n    \n\n### Expected Response\n\nUpon successful deletion, the API may return a status code of `204 No Content`. However, in the case where the product does not exist, as seen in the last execution, the response may return:\n\n- **Status**: `404 Not Found`\n    \n- **Content-Type**: `application/json`\n    \n- { \"status\": 0, \"message\": \"\"}\n    \n\n### Notes\n\n- Ensure that the product ID specified in the URL corresponds to an existing product in the database.\n    \n- If the product does not exist, a `404` status will be returned, indicating that the requested resource could not be found."
			},
			"response": []
		},
		{
			"name": "actualizar producto",
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "nombre",
							"value": "Nuevo Nombre",
							"type": "text"
						},
						{
							"key": "descripcion",
							"value": "Nueva Descripción del producto muy larga",
							"type": "text"
						},
						{
							"key": "precio",
							"value": "20",
							"type": "text"
						},
						{
							"key": "cantidad",
							"value": "20",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:3000/api/productos/45",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"productos",
						"45"
					]
				},
				"description": "# Update Product Information\n\nThis endpoint allows you to update the details of a specific product identified by its unique ID. In this case, the product with ID `45` is being updated.\n\n## HTTP Method\n\n`PATCH`\n\n## Endpoint\n\n`http://localhost:3000/api/productos/45`\n\n## Request Parameters\n\nThe request body must be sent in `x-www-form-urlencoded` format and includes the following parameters:\n\n- **nombre** (text): The name of the product.\n    \n- **descripcion** (text): A description of the product.\n    \n- **precio** (text): The price of the product.\n    \n- **cantidad** (text): The quantity of the product available.\n    \n\n## Response Format\n\nThe response will typically include the updated product information, confirming the changes made. The exact structure of the response will depend on the implementation but is expected to return the product's current state after the update.\n\nEnsure that all parameters are provided correctly to successfully update the product information.\n\nThis endpoint allows you to update the details of a specific product identified by its unique ID. The request uses the HTTP PATCH method to modify the existing attributes of the product.\n\n#### Request Body Parameters:\n\n- **nombre** (text): The name of the product.\n    \n- **descripcion** (text): A description of the product.\n    \n- **precio** (text): The price of the product.\n    \n- **cantidad** (text): The available quantity of the product.\n    \n\n### Expected Outcome\n\nUpon a successful request, the product details will be updated in the database, reflecting the new values provided in the request body. A successful response typically includes the updated product information.\n\nThis endpoint allows you to update the details of a specific product identified by its unique ID. In this case, the product ID is `45`.\n\n#### Request Format\n\n- **Method**: PATCH\n    \n- **URL**: `http://localhost:3000/api/productos/45`\n    \n- **Content-Type**: `application/x-www-form-urlencoded`\n    \n\n#### Request Body Parameters\n\nThe request body must be sent in `x-www-form-urlencoded` format and should include the following parameters:\n\n- **nombre** (text): The name of the product.\n    \n- **descripcion** (text): A brief description of the product.\n    \n- **precio** (text): The price of the product.\n    \n- **cantidad** (text): The quantity of the product available.\n    \n\nEach parameter is required to ensure that the product details are updated correctly.\n\n#### Response Structure\n\nUpon a successful update, the server will respond with a confirmation message and the updated product details. The response body will typically include:\n\n- **status**: A message indicating the success or failure of the update operation.\n    \n- **data**: An object containing the updated product information, including the `nombre`, `descripcion`, `precio`, and `cantidad`.\n    \n\nMake sure to handle any errors that may occur during the update process, such as invalid product ID or missing parameters."
			},
			"response": []
		},
		{
			"name": "mostrar productos",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/productos",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"productos"
					]
				},
				"description": "### GET /api/productos\n\nThis endpoint retrieves a list of products from the server. Upon successful execution, it returns a JSON array containing product details, including the following fields for each product:\n\n- **id**: A unique identifier for the product.\n    \n- **nombre**: The name of the product.\n    \n- **descripcion**: A brief description of the product.\n    \n- **precio**: The price of the product.\n    \n- **cantidad**: The available quantity of the product.\n    \n\nA successful response will have a status code of **200** and will return an array of product objects, enabling clients to display or process product information as needed.\n\n**Method:** GET  \n**URL:** `http://localhost:3000/api/productos`\n\n#### Description\n\nThis endpoint retrieves a list of products from the server. It is designed to provide users with information about available products, including their identifiers, names, descriptions, prices, and quantities.\n\n#### Request Format\n\n- **Method:** GET\n    \n- **Request Body:** None\n    \n\n#### Response Format\n\n- **Status Code:** 200 OK\n    \n- **Content-Type:** application/json\n    \n\n#### Response Structure\n\nThe response is a JSON array containing product objects. Each product object has the following structure:\n\n- **id** (integer): A unique identifier for the product.\n    \n- **nombre** (string): The name of the product.\n    \n- **descripcion** (string): A brief description of the product.\n    \n- **precio** (string): The price of the product.\n    \n- **cantidad** (integer): The available quantity of the product.\n    \n\n##### Example Response\n\n``` json\n[\n    {\n        \"id\": 0,\n        \"nombre\": \"\",\n        \"descripcion\": \"\",\n        \"precio\": \"\",\n        \"cantidad\": 0\n    }\n]\n\n ```\n\nThis endpoint is useful for applications that need to display a list of products to users or for inventory management purposes."
			},
			"response": []
		}
	]
}